"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mean",applicationModuleVendorDependencies=["ngResource","ngAnimate","ngMessages","ui.router","ui.bootstrap","ui.utils","angularFileUpload"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider","$httpProvider",function($locationProvider,$httpProvider){$locationProvider.html5Mode(!0).hashPrefix("!"),$httpProvider.interceptors.push("authInterceptor")}]),angular.module(ApplicationConfiguration.applicationModuleName).run(["$rootScope","$state","Authentication",function($rootScope,$state,Authentication){function storePreviousState(state,params){state.data&&state.data.ignoreState||($state.previous={state:state,params:params,href:$state.href(state,params)})}$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){if(toState.data&&toState.data.roles&&toState.data.roles.length>0){var allowed=!1;toState.data.roles.forEach(function(role){return void 0!==Authentication.user.roles&&-1!==Authentication.user.roles.indexOf(role)?(allowed=!0,!0):void 0}),allowed||(event.preventDefault(),void 0!==Authentication.user&&"object"==typeof Authentication.user?$state.go("forbidden"):$state.go("authentication.signin").then(function(){storePreviousState(toState,toParams)}))}}),$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams){storePreviousState(fromState,fromParams)})}]),angular.element(document).ready(function(){if(window.location.hash&&"#_=_"===window.location.hash)if(window.history&&history.pushState)window.history.pushState("",document.title,window.location.pathname);else{var scroll={top:document.body.scrollTop,left:document.body.scrollLeft};window.location.hash="",document.body.scrollTop=scroll.top,document.body.scrollLeft=scroll.left}angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("chapters"),ApplicationConfiguration.registerModule("chat"),ApplicationConfiguration.registerModule("angular-feeds-demo",["feeds"]),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("core.admin",["core"]),ApplicationConfiguration.registerModule("core.admin.routes",["ui.router"]),ApplicationConfiguration.registerModule("users",["core"]),ApplicationConfiguration.registerModule("users.admin",["core.admin"]),ApplicationConfiguration.registerModule("users.admin.routes",["core.admin.routes"]),angular.module("chapters").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Chapters",state:"chapters",type:"dropdown",roles:["*"]}),Menus.addSubMenuItem("topbar","chapters",{title:"List chapters",state:"chapters.list"}),Menus.addSubMenuItem("topbar","chapters",{title:"Create Chapter",state:"chapters.create",roles:["user","admin"]})}]),angular.module("chapters").config(["$stateProvider",function($stateProvider){$stateProvider.state("edit-sgr-event",{url:"/edit-sgrevent/:sgrEventId",templateUrl:"modules/chapters/client/views/edit-sgrevent.client.view.html"}).state("create-event",{url:"/create/:chapterId",templateUrl:"modules/chapters/client/views/create-sgrevent.client.view.html",data:{roles:["user","admin"]}}).state("view-sgr-event",{url:"/event/:sgrEventId/:chapterId",templateUrl:"modules/chapters/client/views/view-sgrevent.client.view.html"}).state("chapters",{"abstract":!0,url:"/chapters",template:"<ui-view/>"}).state("chapters.list",{url:"",templateUrl:"modules/chapters/client/views/list-chapters.client.view.html"}).state("chapters.create",{url:"/create",templateUrl:"modules/chapters/client/views/create-chapter.client.view.html",data:{roles:["user","admin"]}}).state("chapters.view",{url:"/:chapterId",templateUrl:"modules/chapters/client/views/view-chapter.client.view.html"}).state("chapters.edit",{url:"/:chapterId/edit",templateUrl:"modules/chapters/client/views/edit-chapter.client.view.html",data:{roles:["user","admin"]}})}]),angular.module("chapters").controller("ChaptersController",["$scope","$stateParams","$location","Authentication","Chapters","SgrEvents","$filter",function($scope,$stateParams,$location,Authentication,Chapters,SgrEvents,$filter){function getDayClass(data){var date=data.date,mode=data.mode;if("day"===mode)for(var dayToCheck=new Date(date).setHours(0,0,0,0),i=0;i<$scope.events.length;i++){var currentDay=new Date($scope.events[i].date).setHours(0,0,0,0);if(dayToCheck===currentDay)return $scope.events[i].status}return""}$scope.authentication=Authentication,$scope.sgrEvents=[],$scope.imageURL="modules/chapters/client/img/default.jpeg",$scope.alerts=[],$scope.addAlert=function(){$scope.alerts.push({type:"success",msg:"Success! Your new event has been created."})},$scope.closeAlert=function(index){$scope.alerts.splice(index,1)},$scope.buildPager=function(){$scope.pagedItems=[],$scope.itemsPerPage=15,$scope.currentPage=1,$scope.figureOutItemsToDisplay()},$scope.figureOutItemsToDisplay=function(){$scope.filteredItems=$filter("filter")($scope.chapters,{$:$scope.search}),$scope.filterLength=$scope.filteredItems.length;var begin=($scope.currentPage-1)*$scope.itemsPerPage,end=begin+$scope.itemsPerPage;$scope.pagedItems=$scope.filteredItems.slice(begin,end)},$scope.pageChanged=function(){$scope.figureOutItemsToDisplay()},$scope.resetImageURL=function(){$scope.imageURL="modules/chapters/client/img/default.jpeg"},$scope.resetExistingImageURL=function(){$scope.chapter.profileImageURL=$scope.revert},$scope.resetExistingDefault=function(){$scope.chapter.profileImageURL="modules/chapters/client/img/default.jpeg"},$scope.createChapter=function(isValid){if($scope.error=null,$scope.alerts.push({type:"success",msg:"Success! Your new event has been created."}),!isValid)return $scope.$broadcast("show-errors-check-validity","chapterForm"),!1;var chapter=new Chapters({title:this.title,president:this.president,presidentemail:this.presidentemail,vice:this.vice,viceemail:this.viceemail,location:this.location,content:this.content,profileImageURL:$scope.imageURL});chapter.$save(function(response){$location.path("chapters/"+response._id),$scope.title="",$scope.president="",$scope.presidentemail="",$scope.vice="",$scope.viceemail="",$scope.location="",$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.removeChapter=function(chapter){if(chapter){chapter.$remove();for(var i in $scope.chapters)$scope.chapters[i]===chapter&&$scope.chapters.splice(i,1)}else $scope.chapter.$remove(function(){$location.path("chapters")})},$scope.updateChapter=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","chapterForm"),!1;var chapter=$scope.chapter;chapter.$update(function(){$location.path("chapters/"+chapter._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.findChapter=function(){Chapters.query(function(data){$scope.chapters=data,console.log("chapters"),console.log($scope.chapters),$scope.buildPager()})},$scope.findOneChapter=function(){$scope.chapter=Chapters.get({chapterId:$stateParams.chapterId},function(){$scope.revert=$scope.chapter.profileImageURL,console.log($scope.revert)})},$scope.checkSGREvent=function(){return $scope.sgrEvents},$scope.today=function(){$scope.date=new Date},$scope.today(),$scope.clear=function(){$scope.date=null},$scope.inlineOptions={customClass:getDayClass,minDate:new Date,showWeeks:!0},$scope.dateOptions={formatYear:"yy",minDate:new Date,startingDay:1},$scope.toggleMin=function(){$scope.inlineOptions.minDate=$scope.inlineOptions.minDate?null:new Date,$scope.dateOptions.minDate=$scope.inlineOptions.minDate},$scope.toggleMin(),$scope.open1=function(){$scope.popup1.opened=!0},$scope.open2=function(){$scope.popup2.opened=!0},$scope.setDate=function(year,month,day){$scope.date=new Date(year,month,day)},$scope.formats=["dd-MMMM-yyyy","yyyy/MM/dd","dd.MM.yyyy","shortDate"],$scope.format=$scope.formats[0],$scope.altInputFormats=["M!/d!/yyyy"],$scope.popup1={opened:!1},$scope.popup2={opened:!1};var tomorrow=new Date;tomorrow.setDate(tomorrow.getDate()+1);var afterTomorrow=new Date;afterTomorrow.setDate(tomorrow.getDate()+1),$scope.events=[{date:tomorrow,status:"full"},{date:afterTomorrow,status:"partially"}],$scope.sTime=new Date,$scope.eTime=new Date,$scope.hstep=1,$scope.mstep=1,$scope.options={hstep:[1,2,3],mstep:[1,5,10,15,25,30]},$scope.ismeridian=!0,$scope.toggleMode=function(){$scope.ismeridian=!$scope.ismeridian},$scope.update=function(){var d=new Date;d.setHours(14),d.setMinutes(0),$scope.mytime=d},$scope.clear=function(){$scope.mytime=null},$scope.createEvent=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","sgrEventForm"),!1;var sgrEvent=new SgrEvents({title:this.title,startTime:$scope.sTime,endTime:$scope.eTime,date:$scope.date,location:this.location,content:this.content,chapterId:$stateParams.chapterId});sgrEvent.$save(function(response){$location.path("chapters/"+$stateParams.chapterId),$scope.title="",$scope.date="",$scope.location="",$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.removeEvent=function(sgrEvent){if(sgrEvent){sgrEvent.$remove();for(var i in $scope.sgrEvents)$scope.sgrEvents[i]===sgrEvent&&$scope.sgrEvents.splice(i,1)}else $scope.sgrEvent.$remove(function(){$location.path("chapters/"+$stateParams.chapterId)})},$scope.updateEvent=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","sgrEventForm"),!1;var sgrEvent=$scope.sgrEvent;console.log(sgrEvent.chapterId),console.log(sgrEvent._id),sgrEvent.$update(function(){$location.path("chapters/"+sgrEvent.chapterId)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.findEvent=function(){SgrEvents.query(function(data){for(var i=0;i<data.length;i++)data[i].chapterId===$stateParams.chapterId&&$scope.sgrEvents.push(data[i])})},$scope.findOneEvent=function(){$scope.sgrEvent=SgrEvents.get({sgrEventId:$stateParams.sgrEventId})}}]),angular.module("chapters").factory("Chapters",["$resource",function($resource){return $resource("api/chapters/:chapterId",{chapterId:"@_id"},{update:{method:"PUT"}})}]),function(){function EventsService($resource){return $resource("api/events/:eventId",{eventId:"@_id"},{update:{method:"PUT"}})}angular.module("chapters").factory("Events",EventsService),EventsService.$inject=["$resource"]}(),angular.module("chapters").factory("SgrEvents",["$resource",function($resource){return $resource("api/sgrEvents/:sgrEventId",{sgrEventId:"@_id"},{update:{method:"PUT"}})}]),angular.module("chat").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Regional",state:"chat"})}]),angular.module("chat").config(["$stateProvider",function($stateProvider){$stateProvider.state("chat",{url:"/regional",templateUrl:"modules/chat/client/views/chat.client.view.html",data:{roles:["user","admin"]}})}]),angular.module("chat").controller("ChatController",["$scope","$location","Authentication","Socket","$http","FeedService",function($scope,$location,Authentication,Socket,$http,Feed){$scope.messages=[],$scope.init=function(){$http.get("api/content").success(function(response){$scope.RSSfeeds=response[0].rss,$scope.loadFeed($scope.RSSfeeds[0].content,null,"Select Feed")}).error(function(response){$location.path("/server-error")})},$scope.init(),$scope.feedDefault="Select Feed",$scope.loadFeed=function(feed,e,custom){$scope.feedSrc=feed,Feed.parseFeed(feed).then(function(res){200!==res.data.responseStatus&&($scope.feeds=[],$scope.error="Sorry, this link is not working",$scope.feedDefault="Select Feed"),200===res.data.responseStatus&&(e&&($scope.feedDefault=angular.element(e.target).text()),custom?$scope.feedDefault=custom:$scope.feedDefault=angular.element(e.target).text(),$scope.feeds=res.data.responseData.feed.entries,$scope.error="")})},Authentication.user||$location.path("/"),Socket.socket||Socket.connect(),Socket.on("chatMessage",function(message){$scope.messages.unshift(message)}),$http.get("api/chat/docs").success(function(response){for(var i=0;i<response.length;i++)$scope.messages.push({username:response[i].name,text:response[i].msg,created:response[i].created,profileImageURL:response[i].img})}).error(function(response){}),$scope.sendMessage=function(){var message={text:this.messageText};Socket.emit("chatMessage",message),this.messageText=""},$scope.$on("$destroy",function(){Socket.removeListener("chatMessage")})}]),angular.module("chat").factory("FeedService",["$http",function($http){return{parseFeed:function(url){return $http.jsonp("//ajax.googleapis.com/ajax/services/feed/load?v=1.0&num=50&callback=JSON_CALLBACK&q="+encodeURIComponent(url))}}}]),angular.module("core.admin").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Admin",state:"admin",type:"dropdown",roles:["admin"]})}]),angular.module("core.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin",{"abstract":!0,url:"/admin",template:"<ui-view/>",data:{roles:["admin"]}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(function($injector,$location){$injector.get("$state").transitionTo("not-found",null,{location:!1})}),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/client/views/home.client.view.html"}).state("not-found",{url:"/not-found",templateUrl:"modules/core/client/views/404.client.view.html",data:{ignoreState:!0}}).state("bad-request",{url:"/bad-request",templateUrl:"modules/core/client/views/400.client.view.html",data:{ignoreState:!0}}).state("forbidden",{url:"/forbidden",templateUrl:"modules/core/client/views/403.client.view.html",data:{ignoreState:!0}})}]),angular.module("core").controller("HeaderController",["$scope","$state","Authentication","Menus","AdminGuestsCount","Notifications",function($scope,$state,Authentication,Menus,AdminGuestsCount,Notifications){$scope.$state=$state,$scope.authentication=Authentication,Notifications.update(),$scope.notifications=Notifications.count,$scope.$watch(function(){return Notifications.count},function(newVal){$scope.notifications=newVal}),$scope.menu=Menus.getMenu("topbar"),$scope.isCollapsed=!1,$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication","$http","$location",function($scope,Authentication,$http,$location){$scope.authentication=Authentication,$scope.init=function(){$http.get("api/content").success(function(response){$scope.schemaId=response[0]._id,$scope.carousel=response[0].carousel}).error(function(response){$location.path("/server-error")})},$scope.init(),$scope.myInterval=5e3,$scope.noWrapSlides=!1}]),angular.module("core").directive("showErrors",["$timeout","$interpolate",function($timeout,$interpolate){var linkFn=function(scope,el,attrs,formCtrl){var inputEl,inputName,inputNgEl,options,showSuccess,toggleClasses,initCheck=!1,showValidationMessages=!1;if(options=scope.$eval(attrs.showErrors)||{},showSuccess=options.showSuccess||!1,inputEl=el[0].querySelector(".form-control[name]")||el[0].querySelector("[name]"),inputNgEl=angular.element(inputEl),inputName=$interpolate(inputNgEl.attr("name")||"")(scope),!inputName)throw"show-errors element has no child input elements with a 'name' attribute class";var reset=function(){return $timeout(function(){el.removeClass("has-error"),el.removeClass("has-success"),showValidationMessages=!1},0,!1)};scope.$watch(function(){return formCtrl[inputName]&&formCtrl[inputName].$invalid},function(invalid){return toggleClasses(invalid)}),scope.$on("show-errors-check-validity",function(event,name){return angular.isUndefined(name)||formCtrl.$name===name?(initCheck=!0,showValidationMessages=!0,toggleClasses(formCtrl[inputName].$invalid)):void 0}),scope.$on("show-errors-reset",function(event,name){return angular.isUndefined(name)||formCtrl.$name===name?reset():void 0}),toggleClasses=function(invalid){return el.toggleClass("has-error",showValidationMessages&&invalid),showSuccess?el.toggleClass("has-success",showValidationMessages&&!invalid):void 0}};return{restrict:"A",require:"^form",compile:function(elem,attrs){if(-1===attrs.showErrors.indexOf("skipFormGroupCheck")&&!elem.hasClass("form-group")&&!elem.hasClass("input-group"))throw"show-errors element does not have the 'form-group' or 'input-group' class";return linkFn}}}]),angular.module("core").factory("authInterceptor",["$q","$injector",function($q,$injector){return{responseError:function(rejection){if(!rejection.config.ignoreAuthModule)switch(rejection.status){case 401:$injector.get("$state").transitionTo("authentication.signin");break;case 403:$injector.get("$state").transitionTo("forbidden")}return $q.reject(rejection)}}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["user","admin"],this.menus={};var shouldRender=function(user){if(~this.roles.indexOf("*"))return!0;if(!user)return!1;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exist")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,options){return options=options||{},this.menus[menuId]={roles:options.roles||this.defaultRoles,items:options.items||[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,options){if(options=options||{},this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:options.title||"",state:options.state||"",type:options.type||"item","class":options["class"],roles:null===options.roles||"undefined"==typeof options.roles?this.defaultRoles:options.roles,position:options.position||0,items:[],shouldRender:shouldRender}),options.items)for(var i in options.items)this.addSubMenuItem(menuId,options.state,options.items[i]);return this.menus[menuId]},this.addSubMenuItem=function(menuId,parentItemState,options){options=options||{},this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===parentItemState&&this.menus[menuId].items[itemIndex].items.push({title:options.title||"",state:options.state||"",roles:null===options.roles||"undefined"==typeof options.roles?this.menus[menuId].items[itemIndex].roles:options.roles,position:options.position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===menuItemState&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].state===submenuItemState&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar",{roles:["*"]})}]),angular.module("core").service("Socket",["Authentication","$state","$timeout",function(Authentication,$state,$timeout){this.connect=function(){Authentication.user&&(this.socket=io())},this.connect(),this.on=function(eventName,callback){this.socket&&this.socket.on(eventName,function(data){$timeout(function(){callback(data)})})},this.emit=function(eventName,data){this.socket&&this.socket.emit(eventName,data)},this.removeListener=function(eventName){this.socket&&this.socket.removeListener(eventName)}}]),angular.module("users.admin").run(["Menus",function(Menus){Menus.addSubMenuItem("topbar","admin",{title:"Manage Guests",state:"admin.guests"}),Menus.addSubMenuItem("topbar","admin",{title:"Manage Users",state:"admin.users"}),Menus.addSubMenuItem("topbar","admin",{title:"Manage Admins",state:"admin.admins",roles:["superadmin"]}),Menus.addSubMenuItem("topbar","admin",{title:"Manage Content",state:"admin.content",roles:["superadmin"]})}]),angular.module("users.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin.users",{url:"/users",templateUrl:"modules/users/client/views/admin/list-users.client.view.html",controller:"UserListController"}).state("admin.guests",{url:"/guests",templateUrl:"modules/users/client/views/admin/list-guests.client.view.html",controller:"UserGuestController"}).state("admin.admins",{url:"/admins",templateUrl:"modules/users/client/views/admin/list-admins.client.view.html",controller:"UserAdminController"}).state("admin.content",{url:"/content",templateUrl:"modules/users/client/views/admin/content.client.view.html",controller:"ContentController"}).state("admin.user",{url:"/users/:userId",templateUrl:"modules/users/client/views/admin/view-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}}).state("admin.user-edit",{url:"/users/:userId/edit",templateUrl:"modules/users/client/views/admin/edit-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("settings",{"abstract":!0,url:"/settings",templateUrl:"modules/users/client/views/settings/settings.client.view.html",data:{roles:["user","admin","guest"]}}).state("settings.profile",{url:"/profile",templateUrl:"modules/users/client/views/settings/edit-profile.client.view.html"}).state("settings.password",{url:"/password",templateUrl:"modules/users/client/views/settings/change-password.client.view.html"}).state("settings.accounts",{url:"/accounts",templateUrl:"modules/users/client/views/settings/manage-social-accounts.client.view.html"}).state("settings.picture",{url:"/picture",templateUrl:"modules/users/client/views/settings/change-profile-picture.client.view.html"}).state("authentication",{"abstract":!0,url:"/authentication",templateUrl:"modules/users/client/views/authentication/authentication.client.view.html"}).state("authentication.signup",{url:"/signup",templateUrl:"modules/users/client/views/authentication/signup.client.view.html"}).state("authentication.signin",{url:"/signin?err",templateUrl:"modules/users/client/views/authentication/signin.client.view.html"}).state("password",{"abstract":!0,url:"/password",template:"<ui-view/>"}).state("password.forgot",{url:"/forgot",templateUrl:"modules/users/client/views/password/forgot-password.client.view.html"}).state("password.reset",{"abstract":!0,url:"/reset",template:"<ui-view/>"}).state("password.reset.invalid",{url:"/invalid",templateUrl:"modules/users/client/views/password/reset-password-invalid.client.view.html"}).state("password.reset.success",{url:"/success",templateUrl:"modules/users/client/views/password/reset-password-success.client.view.html"}).state("password.reset.form",{url:"/:token",templateUrl:"modules/users/client/views/password/reset-password.client.view.html"})}]),angular.module("users.admin").controller("ContentController",["$scope","Authentication","$location","$window","$http",function($scope,Authentication,$location,$window,$http){$scope.authentication=Authentication,$scope.init=function(){$http.get("api/content").success(function(response){$scope.schemaId=response[0]._id,$scope.rss=response[0].rss,$scope.carousel=response[0].carousel}).error(function(response){$location.path("/server-error")})},$scope.init(),$scope.addRSS=function(){$scope.rssError&&($scope.rssError=null),$scope.rss[$scope.rss.length-1].title&&$scope.rss[$scope.rss.length-1].content?$scope.rss.push({title:"",content:""}):$scope.rssError="Please fill the last item before trying to add more."},$scope.removeRSS=function(index){$scope.rssError&&($scope.rssError=null),$scope.rss.length-1===0?$scope.rssError="Must have at least one item":$scope.rss.splice(index,1)},$scope.addCarousel=function(){$scope.carouselError&&($scope.carouselError=null),$scope.carousel[$scope.carousel.length-1].image&&$scope.carousel[$scope.carousel.length-1].text?$scope.carousel.push({image:"",text:""}):$scope.carouselError="Please fill the last item before trying to add more."},$scope.removeCarousel=function(index){$scope.carouselError&&($scope.carouselError=null),$scope.carousel.length-1===0?$scope.carouselError="Must have at least one item":$scope.carousel.splice(index,1)},$scope.update=function(){for(var i=0;i<$scope.carousel.length;i++)$scope.carousel[i].id=i;var data={id:$scope.schemaId,rss:$scope.rss,carousel:$scope.carousel};$http.put("api/content",data).then(function(res){$scope.rssError=null,$scope.carouselError=null,$scope.success=!0,$scope.rss=res.data.rss,$scope.carousel=res.data.carousel})}}]),angular.module("users.admin").controller("UserAdminController",["$scope","$filter","AdminAdmins","Admin","$state","Notifications","Authentication","Users","$location","$window",function($scope,$filter,AdminAdmins,Admin,$state,Notifications,Authentication,Users,$location,$window){$scope.authentication=Authentication,$scope.isSuperAdmin=function(roles){return-1!==roles.indexOf("superadmin")},AdminAdmins.query(function(data){$scope.users=data,$scope.buildPager()}),$scope.buildPager=function(){$scope.pagedItems=[],$scope.itemsPerPage=15,$scope.currentPage=1,$scope.figureOutItemsToDisplay()},$scope.figureOutItemsToDisplay=function(){$scope.filteredItems=$filter("filter")($scope.users,{$:$scope.search}),$scope.filterLength=$scope.filteredItems.length;var begin=($scope.currentPage-1)*$scope.itemsPerPage,end=begin+$scope.itemsPerPage;$scope.pagedItems=$scope.filteredItems.slice(begin,end)},$scope.pageChanged=function(){$scope.figureOutItemsToDisplay()},$scope.info=function(userId){$state.go("admin.user",{userId:userId})},$scope.setModalInformation=function(title,body,user,method){$scope.modalHeader=title,$scope.modalBody=body,$scope.user=user,$scope.modalMethod=method},$scope.promote=function(){$scope.promoteNewSuperAdmin(),$scope.demoteCurrentSuperAdmin()},$scope.promoteNewSuperAdmin=function(){$scope.entry=Admin.get({userId:$scope.user._id},function(){$scope.entry.roles.push("superadmin"),$scope.entry.$update(function(res){})})},$scope.demoteCurrentSuperAdmin=function(){var oldAdmin=Admin.get({userId:Authentication.user._id},function(){var index=oldAdmin.roles.indexOf("superadmin");index>-1&&oldAdmin.roles.splice(index,1),oldAdmin.$update(function(res){$window.location.href="/"})})},$scope.demote=function(){$scope.entry=Admin.get({userId:$scope.user._id},function(){$scope.entry.roles=["user"],$scope.entry.$update(function(){$scope.users.splice($scope.users.indexOf($scope.user),1),$scope.buildPager(),Notifications.update()})})}}]),angular.module("users.admin").controller("UserGuestController",["$scope","$filter","AdminGuests","$state","Admin","Notifications","Authentication",function($scope,$filter,AdminGuests,$state,Admin,Notifications,Authentication){$scope.authentication=Authentication,$scope.users=[],AdminGuests.query(function(data){$scope.filterUsers(data),$scope.buildPager()}),$scope.filterUsers=function(data){if($scope.isSuperAdmin($scope.authentication.user.roles))$scope.users=data;else for(var i=0;i<data.length;i++)data[i].firstName&&data[i].lastName&&data[i].email&&data[i].affiliation&&data[i].username&&data[i].affiliation===$scope.authentication.user.affiliation&&$scope.users.push(data[i])},$scope.isSuperAdmin=function(roles){return-1!==roles.indexOf("superadmin")},$scope.buildPager=function(){$scope.pagedItems=[],$scope.itemsPerPage=15,$scope.currentPage=1,$scope.figureOutItemsToDisplay()},$scope.figureOutItemsToDisplay=function(){$scope.filteredItems=$filter("filter")($scope.users,{$:$scope.search}),$scope.filterLength=$scope.filteredItems.length;var begin=($scope.currentPage-1)*$scope.itemsPerPage,end=begin+$scope.itemsPerPage;$scope.pagedItems=$scope.filteredItems.slice(begin,end)},$scope.pageChanged=function(){$scope.figureOutItemsToDisplay()},$scope.info=function(user){$state.go("admin.user",{userId:user._id})},$scope.setModalInformation=function(title,body,user,method){$scope.modalHeader=title,$scope.modalBody=body,$scope.user=user,$scope.modalMethod=method},$scope.approve=function(){$scope.user.firstName&&$scope.user.lastName&&$scope.user.affiliation&&$scope.user.email&&$scope.user.username?$scope.entry=Admin.get({userId:$scope.user._id},function(){$scope.entry.roles=["user"],$scope.entry.$update(function(){$scope.users.splice($scope.users.indexOf($scope.user),1),$scope.buildPager(),Notifications.update()})}):alert("Guests missing information cannot be promoted. Try again when this user has filled out their profile completely.")},$scope.deny=function(){Admin.remove({userId:$scope.user._id},function(data){$scope.users.splice($scope.users.indexOf($scope.user),1),$scope.buildPager(),Notifications.update()})}}]),angular.module("users.admin").controller("UserListController",["$scope","$filter","Admin","$state","Notifications","Authentication",function($scope,$filter,Admin,$state,Notifications,Authentication){$scope.authentication=Authentication,$scope.users=[],Admin.query(function(data){$scope.filterUsers(data),$scope.buildPager()}),$scope.filterUsers=function(data){for(var i=0;i<data.length;i++)$scope.isSuperAdmin(data[i].roles)&&data.splice(i,1);if($scope.isSuperAdmin($scope.authentication.user.roles))$scope.users=data;else for(i=0;i<data.length;i++)data[i].affiliation===$scope.authentication.user.affiliation&&$scope.users.push(data[i])},$scope.isSuperAdmin=function(roles){return-1!==roles.indexOf("superadmin")},$scope.isAdmin=function(roles){return-1!==roles.indexOf("admin")},$scope.buildPager=function(){$scope.pagedItems=[],$scope.itemsPerPage=15,$scope.currentPage=1,$scope.figureOutItemsToDisplay()},$scope.figureOutItemsToDisplay=function(){$scope.filteredItems=$filter("filter")($scope.users,{$:$scope.search}),$scope.filterLength=$scope.filteredItems.length;var begin=($scope.currentPage-1)*$scope.itemsPerPage,end=begin+$scope.itemsPerPage;$scope.pagedItems=$scope.filteredItems.slice(begin,end)},$scope.pageChanged=function(){$scope.figureOutItemsToDisplay()},$scope.info=function(userId){$state.go("admin.user",{userId:userId})},$scope.setModalInformation=function(title,body,user,method){$scope.modalHeader=title,$scope.modalBody=body,$scope.user=user,$scope.modalMethod=method},$scope.promote=function(){$scope.entry=Admin.get({userId:$scope.user._id},function(){$scope.entry.roles=["admin"],$scope.entry.$update(function(){$scope.users.splice($scope.users.indexOf($scope.user),1),$scope.buildPager(),Notifications.update()})})},$scope.demote=function(){$scope.entry=Admin.get({userId:$scope.user._id},function(){$scope.entry.roles=["guest"],$scope.entry.$update(function(){
$scope.users.splice($scope.users.indexOf($scope.user),1),$scope.buildPager(),Notifications.update()})})}}]),angular.module("users.admin").controller("UserController",["$scope","$state","Authentication","userResolve","Notifications","AdminGuestsCount","$http","$location",function($scope,$state,Authentication,userResolve,Notifications,AdminGuestsCount,$http,$location){$scope.authentication=Authentication,$scope.user=userResolve,$scope.chapters=[],$scope.usersChapter={id:null},$scope.isSuperAdmin=function(roles){return-1!==roles.indexOf("superadmin")},$scope.isAdmin=function(roles){return-1!==roles.indexOf("admin")},$scope.getChapters=function(response){for(var i=0;i<response.length;i++)response[i].title===$scope.user.affiliation&&($scope.usersChapter={id:i}),$scope.chapters.push({id:i,name:response[i].title})},$scope.init=function(){$http.get("api/chapters").success(function(response){response.length?$scope.user.$promise.then(function(res){$scope.user.affiliation=res.affiliation,$scope.getChapters(response)}):$location.path("/server-error")}).error(function(response){$location.path("/server-error")})},$scope.init(),$scope.remove=function(user){confirm("Are you sure you want to delete this user?")&&(user?(user.$remove(),$scope.users.splice($scope.users.indexOf(user),1)):$scope.user.$remove(function(){$state.go("admin.users")}))},$scope.update=function(isValid){if(!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;for(var i=0;i<$scope.chapters.length;i++)$scope.chapters[i].id===$scope.usersChapter.id&&($scope.user.affiliation=$scope.chapters[i].name);var user=$scope.user;user.roles.indexOf("guest")>-1&&user.roles.length>1?$scope.error="A user cannot be a guest and something else at the same time.":user.$update(function(response){response.username===$scope.authentication.user.username&&(Authentication.user=response),Notifications.update(),$state.go("admin.user",{userId:user._id})},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("users").controller("AuthenticationController",["$scope","$state","$http","$location","$window","Authentication","PasswordValidator","Menus","AdminGuestsCount","Notifications",function($scope,$state,$http,$location,$window,Authentication,PasswordValidator,Menus,AdminGuestsCount,Notifications){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.error=$location.search().err,$scope.authentication.user&&$location.path("/"),$scope.data={availableOptions:[]},$http.get("api/chapters").success(function(response){if(response.length)for(var i=0;i<response.length;i++)$scope.data.availableOptions.push(response[i].title);else $location.path("/server-error")}).error(function(response){$location.path("/server-error")}),$scope.sendMail=function(){var data={firstName:$scope.credentials.firstName,lastName:$scope.credentials.lastName,affiliation:$scope.credentials.affiliation,email:$scope.credentials.email};$http.post("api/auth/sendEmails",data).then(function(res){})},$scope.postUser=function(){$http.post("/api/auth/signup",$scope.credentials).success(function(response){$scope.sendMail(),$scope.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.error=response.message})},$scope.signup=function(isValid){return $scope.error=null,isValid?void $scope.postUser():($scope.$broadcast("show-errors-check-validity","userForm"),!1)},$scope.signin=function(isValid){return $scope.error=null,isValid?void $http.post("/api/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,Notifications.update(),$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","userForm"),!1)},$scope.callOauthProvider=function(url){$state.previous&&$state.previous.href&&(url+="?redirect_to="+encodeURIComponent($state.previous.href)),$window.location.href=url}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication","PasswordValidator",function($scope,$stateParams,$http,$location,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","forgotPasswordForm"),!1)},$scope.resetUserPassword=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","resetPasswordForm"),!1)}}]),angular.module("users").controller("ChangePasswordController",["$scope","$http","Authentication","PasswordValidator",function($scope,$http,Authentication,PasswordValidator){$scope.user=Authentication.user,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.changeUserPassword=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/users/password",$scope.passwordDetails).success(function(response){$scope.$broadcast("show-errors-reset","passwordForm"),$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","passwordForm"),!1)}}]),angular.module("users").controller("ChangeProfilePictureController",["$scope","$timeout","$window","Authentication","FileUploader","Users",function($scope,$timeout,$window,Authentication,FileUploader,Users){$scope.user=Authentication.user,$scope.imageURL=$scope.user.profileImageURL,$scope.uploadProfilePicture=function(isValid){if($scope.success=$scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=new Users($scope.user);user.profileImageURL=$scope.imageURL,user.$update(function(response){$scope.$broadcast("show-errors-reset","userForm"),$scope.success=!0,Authentication.user=response,$scope.user.profileImageURL=response.profileImageURL},function(response){$scope.error=response.data.message})}}]),angular.module("users").controller("EditProfileController",["$scope","$http","$location","Users","Authentication","$interval",function($scope,$http,$location,Users,Authentication,$interval){$scope.user=Authentication.user,$scope.missing=!1,$scope.isAGuest=!1,$scope.user.firstName&&$scope.user.lastName&&$scope.user.email&&$scope.user.affiliation&&$scope.user.username||($scope.missing=!0,-1!==$scope.user.roles.indexOf("guest")&&($scope.isAGuest=!0)),$scope.chapters=[],$scope.usersChapter={id:null},$http.get("api/chapters").success(function(response){if(response.length)for(var i=0;i<response.length;i++)response[i].title===$scope.user.affiliation&&($scope.usersChapter={id:i}),$scope.chapters.push({id:i,name:response[i].title});else $location.path("/server-error")}).error(function(response){$location.path("/server-error")}),$scope.updateUserProfile=function(isValid){if($scope.success=$scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;for(var i=0;i<$scope.chapters.length;i++)$scope.chapters[i].id===$scope.usersChapter.id&&($scope.user.affiliation=$scope.chapters[i].name);var user=new Users($scope.user);user.$update(function(response){if($scope.$broadcast("show-errors-reset","userForm"),$scope.success=!0,Authentication.user=response,$scope.missing&&($scope.missing=!1,$scope.isAGuest)){var data={firstName:$scope.user.firstName,lastName:$scope.user.lastName,affiliation:$scope.user.affiliation,email:$scope.user.email};$http.post("api/auth/sendEmails",data).then(function(res){})}},function(response){$scope.error=response.data.message})}}]),angular.module("users").controller("SocialAccountsController",["$scope","$http","Authentication",function($scope,$http,Authentication){$scope.user=Authentication.user,$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/api/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication,$scope.user=Authentication.user}]),angular.module("users").directive("passwordValidator",["PasswordValidator",function(PasswordValidator){return{require:"ngModel",link:function(scope,element,attrs,ngModel){ngModel.$validators.requirements=function(password){var status=!0;if(password){var result=PasswordValidator.getResult(password),requirementsIdx=0,requirementsMeter=[{color:"danger",progress:"20"},{color:"warning",progress:"40"},{color:"info",progress:"60"},{color:"primary",progress:"80"},{color:"success",progress:"100"}];result.errors.length<requirementsMeter.length&&(requirementsIdx=requirementsMeter.length-result.errors.length-1),scope.requirementsColor=requirementsMeter[requirementsIdx].color,scope.requirementsProgress=requirementsMeter[requirementsIdx].progress,result.errors.length?(scope.popoverMsg=PasswordValidator.getPopoverMsg(),scope.passwordErrors=result.errors,status=!1):(scope.popoverMsg="",scope.passwordErrors=[],status=!0)}return status}}}}]),angular.module("users").directive("passwordVerify",[function(){return{require:"ngModel",scope:{passwordVerify:"="},link:function(scope,element,attrs,ngModel){scope.$watch(function(){var combined;return(scope.passwordVerify||ngModel)&&(combined=scope.passwordVerify+"_"+ngModel),combined},function(value){value&&(ngModel.$validators.passwordVerify=function(password){var origin=scope.passwordVerify;return origin!==password?!1:!0})})}}}]),angular.module("users").directive("lowercase",function(){return{require:"ngModel",link:function(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(input){return input?input.toLowerCase():""}),element.css("text-transform","lowercase")}}}),angular.module("users").factory("Authentication",["$window",function($window){var auth={user:$window.user};return auth}]),angular.module("users").service("Notifications",["Menus","Authentication","AdminGuests",function(Menus,Authentication,AdminGuests){var self=this;self.authentication=Authentication,self.count=0,self.countChange=function(count){self.count=count},self.getCount=function(){AdminGuests.query(function(data){var count=self.getEligibleUsersCount(data);self.countChange(count)},function(error){})},self.getEligibleUsersCount=function(data){var count=0;if(self.isSuperAdmin(self.authentication.user.roles))count=data.length;else for(var i=0;i<data.length;i++)data[i].firstName&&data[i].lastName&&data[i].email&&data[i].affiliation&&data[i].username&&data[i].affiliation===self.authentication.user.affiliation&&count++;return count},self.updateCount=function(){self.menu=Menus.getMenu("topbar");for(var i=0;i<self.menu.items.length;i++){var obj=self.menu.items[i];for(var prop in obj)obj.hasOwnProperty(prop)&&"Admin"===obj[prop]&&obj.shouldRender(Authentication.user)&&self.getCount()}},self.update=function(){self.updateCount()},self.isSuperAdmin=function(roles){return-1!==roles.indexOf("superadmin")}}]),angular.module("users").factory("PasswordValidator",["$window",function($window){var owaspPasswordStrengthTest=$window.owaspPasswordStrengthTest;return{getResult:function(password){var result=owaspPasswordStrengthTest.test(password);return result},getPopoverMsg:function(){var popoverMsg="Please enter a passphrase or password with greater than 10 characters, numbers, lowercase, upppercase, and special characters.";return popoverMsg}}}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("api/users",{},{update:{method:"PUT"}})}]),angular.module("users.admin").factory("Admin",["$resource",function($resource){return $resource("api/users/:userId",{userId:"@_id"},{update:{method:"PUT"}})}]).factory("AdminGuests",["$resource",function($resource){return $resource("api/guests/:guestId",{userId:"@_id"},{update:{method:"PUT"}})}]).factory("AdminGuestsCount",["$resource",function($resource){return $resource("api/guestcount",{userId:"@_id"},{update:{method:"PUT"}})}]).factory("AdminAdmins",["$resource",function($resource){return $resource("api/admins/:adminId",{userId:"@_id"},{update:{method:"PUT"}})}]);